#!/usr/bin/env sh

# Pre-commit script for Node.js that executes:
# - prettier
# - eslint
# - test suite

# Colors
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
RESET='\e[0m'
BOLD='\e[1m'

# Git Metadata
ROOT_DIR="$(git rev-parse --show-toplevel)"
BUILD_DIR="${ROOT_DIR}/target"
BRANCH_NAME=$(git branch | grep '*' | sed 's/* //')
STASH_NAME="pre-commit-$(date +%s) on ${BRANCH_NAME}"

printf "[*] ${BOLD}Checking for unstashed changes:${RESET}\n"
stash=0
# Check to make sure commit isn't empty
if git diff-index --cached --quiet HEAD --; then
    # It was empty, exit with status 0 to let git handle it
    exit 0
else
    # Stash changes that aren't added to the staging index so we test
    # only the changes to be committed
    old_stash=$(git rev-parse -q --verify refs/stash)
    git stash push -q --keep-index -m "$STASH_NAME"
    new_stash=$(git rev-parse -q --verify refs/stash)

    printf "[*] Stashed changes as: ${BOLD}${STASH_NAME}${RESET}\n"
    if [ "$old_stash" = "$new_stash" ]; then
        printf "[?] No changes, ${YELLOW}skipping tests${RESET}\n"
        exit 0
    else
        stash=1
    fi
fi

printf "[*] ${BOLD}Testing:${RESET}\n"
git diff --cached --stat
printf "\n"

#=====# Locally executed hooks #=====#
# Typecheck, format, lint and test
tsc --noEmit && \
prettier --write "{lib,src,test,tools}/**/*.ts" && \
eslint --max-warnings=1 "{lib,src,test,tools}/**/*.ts" --fix && \
pnpm test && pnpm test:cov && pnpm test:e2e

# Capture exit code from tests
status=$?

# Inform user of build failure
printf "[*] ${BOLD}Build status:${RESET}\n"
if [ "$status" -ne "0" ]
then
    printf "[!] ${RED}failed:${RESET} if you still want to commit use ${BOLD}'--no-verify'${RESET}\n"
else
    printf "[*] ${GREEN}passed${RESET}\n"
fi

# Revert stash if changes were stashed to restore working directory files
if [ "$stash" -eq 1 ]
then
    printf "[*] ${BOLD}Restoring working tree${RESET}\n"
    if git reset --hard -q &&
       git stash apply --index -q &&
       git stash drop -q
    then
        printf "[*] ${GREEN}restored${RESET} ${STASH_NAME}\n"
    else
        printf "[!] ${RED}unable to revert stash command${RESET}\n"
    fi
fi

# Exit with exit code from tests, so if they fail, prevent commit
exit $status
